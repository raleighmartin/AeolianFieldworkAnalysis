% %% SCRIPT TO EXTRACT SALTATION AND WIND DATA FOR ANALYSIS, EXPORT AS ASCII FILES
% % FUNCTION DEPENDENCIES: IntersectingTimeIntervals.m, CreateTimeBlocks.m, 
% 
% %% initialize
% clearvars;
% 
% %% information for data extraction
% Site = 'Oceano'; %name of field site
% Dates = [datetime(2015,6,2);datetime(2015,6,3)]; %dates for data extraction
% WindInstrumentType = 'Sonic'; %choose instrument type for wind data ('Sonic' for Campbells, 'Ultrasonic' for RM Young)
% use_raw_wind = 1; %use raw (non-interpolated) wind data? 0 for no, 1 for yes
% use_calibrated_flux = 1; %use calibrated flux values? 0 for no (raw Wenglor counts), 1 for yes
% use_time_outside_BSNE = 1; %use times outside BSNE intervals (affects calibration)? 0 for no, 1 for yes
% dt_wind_window = 0.02; %time interval for wind data extraction (s)
% dt_flux_window = 0.04; %time interval for Wenglor data extraction (s)
% 
% %% information about where to load/save data
% folder_LoadData = '../../../../Google Drive/Data/AeolianFieldwork/Processed/'; %folder for retrieving processed data
% folder_SaveData = '../../../../Google Drive/Data/AeolianFieldwork/Processed/'; %folder for storing outputs of this extraction
% 
% %% load functions
% folder_Functions = '../Functions/'; %folder with functions
% addpath(folder_Functions); %point MATLAB to location of functions
% 
% %% load processed data and extract relevant variables
% LoadData_Path = strcat(folder_LoadData,'ProcessedData_',Site);
% load(LoadData_Path); %load processed data
% WenglorData = ProcessedData.FluxWenglor; %Wenglor flux data
% BSNEData = ProcessedData.FluxBSNE; %BSNE data
% WindData = ProcessedData.(WindInstrumentType); %data for all anemometers
% clear ProcessedData; %remove 'ProcessedData' to clear up memory
% 
% %% get start times and end times for flux observations
% WenglorStartTimes = [WenglorData.StartTime]';
% WenglorEndTimes = [WenglorData.EndTime]';
% BSNEStartTimes = [BSNEData.StartTime]';
% BSNEEndTimes = [BSNEData.EndTime]';
% 
% %% get start times and end times for wind observations for profile of anemometers
% AnemometerName_profile = fieldnames(WindData); %anemometer names
% N_Anemometers_profile = length(AnemometerName_profile); %number of anemometers
% WindStartTimes_profile = cell(N_Anemometers_profile,1); %start times for wind data in profile
% WindEndTimes_profile = cell(N_Anemometers_profile,1); %end times for wind data in profile
% for j = 1:N_Anemometers_profile
%     WindStartTimes_profile{j} = [WindData.(AnemometerName_profile{j}).StartTime]';
%     WindEndTimes_profile{j} = [WindData.(AnemometerName_profile{j}).EndTime]';
% end
% 
% %% get intersecting time intervals for flux
% if use_time_outside_BSNE==0 %in this case, consider time intervals only when BSNE traps are active for calibration
%     [FluxStartTimes, FluxEndTimes] = IntersectingTimeIntervals(BSNEStartTimes,BSNEEndTimes,WenglorStartTimes,WenglorEndTimes);
% else %otherwise, use all Wenglor data
%     FluxStartTimes = WenglorStartTimes;
%     FluxEndTimes = WenglorEndTimes;
% end
% 
% %% get intersecting time intervals for all anemometers in profile
% WindStartTimes = WindStartTimes_profile{1}; %initialize with times for first anemometer
% WindEndTimes = WindEndTimes_profile{1}; %initialize with times for first anemometer
% for j = 2:N_Anemometers_profile %get intersecting values for subsequent anemometers
%     [WindStartTimes, WindEndTimes] = IntersectingTimeIntervals(WindStartTimes,WindEndTimes,WindStartTimes_profile{j},WindEndTimes_profile{j});
% end
% 
% %% get flux/wind intersecting time intervals
% [StartTimesIntersecting, EndTimesIntersecting] = IntersectingTimeIntervals(WindStartTimes,WindEndTimes,FluxStartTimes,FluxEndTimes);
% 
% %% get time intervals for extraction based on dates of interest
% [y,m,d] = ymd(StartTimesIntersecting);
% DatesIntersecting = datetime(y,m,d);
% ind_Extraction = find(ismember(DatesIntersecting,Dates));
% 
% StartTimesExtraction = StartTimesIntersecting(ind_Extraction); %initialize list of start times for extraction
% EndTimesExtraction = EndTimesIntersecting(ind_Extraction); %initialize list of end times for extraction

%specify arguments for extraction
if use_raw_wind==1
    wind_arg = 'raw';
else
    wind_arg = 'int';
end

if use_calibrated_flux==1
    flux_arg = 'qz';
    flux_label = 'q';
    flux_units = 'g/m2/s';
else
    flux_arg = 'n';
    flux_label = 'n';
    flux_units = '(counts)';
end

%go through time intervals, then extract and export data
N_Intervals = length(ind_Extraction);
for i = 1:N_Intervals

    name_header = [Site,'_',datestr(StartTimesExtraction(i),'yyyymmdd_HHMM'),'_',datestr(EndTimesExtraction(i),'HHMM')];
    
    %wind variables
    for j = 1:N_Anemometers_profile
        
        %extract wind variables
        [u, t, IntervalN, IntervalInd] = ...
            ExtractVariableTimeInterval(WindData.(AnemometerName_profile{j}),...
            StartTimesExtraction(i),EndTimesExtraction(i),'u',wind_arg,wind_arg);
        v = WindData.(AnemometerName_profile{j})(IntervalN(1)).v.(wind_arg)(IntervalInd{1});
        w = WindData.(AnemometerName_profile{j})(IntervalN(1)).w.(wind_arg)(IntervalInd{1});
        T = WindData.(AnemometerName_profile{j})(IntervalN(1)).T.(wind_arg)(IntervalInd{1});
        diag = double(WindData.(AnemometerName_profile{j})(IntervalN(1)).diag.(wind_arg)(IntervalInd{1}));
        z = WindData.(AnemometerName_profile{j})(IntervalN(1)).z.z;
        
        %export wind data matrix
        wind_data_matrix = [hour(t) minute(t) second(t) u v w T diag];
        name_wind_data = [name_header,'_Wind_',AnemometerName_profile{j},'_z',int2str(1000*z),'mm.txt'];
        dlmwrite([folder_SaveData,name_wind_data],wind_data_matrix);
    end
    
    %extract flux variables
    [~, t, IntervalN, IntervalInd] = ...
        ExtractVariableTimeInterval(WenglorData,...
        StartTimesExtraction(i),EndTimesExtraction(i),'qz','qz','t');
    q = WenglorData(IntervalN(1)).qz.(flux_arg);
    z = WenglorData(IntervalN(1)).qz.z;

    %create table of flux data
    N_q = size(q,2);
    variable_names = cell(1,N_q);
    table_names = cell(1,N_q);
    for j = 1:N_q
        variable_names{j} = [flux_label,int2str(j)];
        table_names{j} = ['q(:,',int2str(j),'),'];
    end
    VariableHeaders = [{'Hour','Minute','Second'},variable_names];
    TableCreationString = ['flux_data_table = table(hour(t),minute(t),second(t),',[table_names{1,:}],'''VariableNames'',VariableHeaders);'];
    eval(TableCreationString);
    name_flux_data = [name_header,'_Flux.txt'];
    writetable(flux_data_table,[folder_SaveData,name_flux_data]);
    
    %create table of flux heights
    for j = 1:N_q
        variable_names{j} = ['z',int2str(j)];
        table_names{j} = ['z(:,',int2str(j),'),'];
    end
    VariableHeaders = [{'Hour','Minute','Second'},variable_names];
    TableCreationString = ['flux_height_table = table(hour(t),minute(t),second(t),',[table_names{1,:}],'''VariableNames'',VariableHeaders);'];
    eval(TableCreationString);
    name_flux_heights = [name_header,'_FluxHeights.txt'];
    writetable(flux_height_table,[folder_SaveData,name_flux_heights]);
   
    %export flux metadata
    name_flux_metadata = [name_header,'_FluxMetadata.txt'];
    path
    fileID = fopen(name_flux_metadata,'w');
    for j = 1:N_q
        metadata_text = [flux_label,int2str(j),'(z',int2str(j),') ',flux_units,'\r'];
        fprintf(fileID,metadata_text);
    end
    
    %export flux heights
    flux_height_matrix = [hour(t) minute(t) second(t) z];
    name_flux_height = [name_header,'_FluxHeight_m.txt'];
    dlmwrite([folder_SaveData,name_flux_height],flux_height_matrix);
end